{".eslintrc.json":{"content":"{ \"root\": true, \"parser\": \"@typescript-eslint/parser\", \"parserOptions\": { \"ecmaVersion\": 6, \"sourceType\": \"module\" }, \"plugins\": [ \"@typescript-eslint\" ], \"rules\": { \"@typescript-eslint/naming-convention\": [ \"warn\", { \"selector\": \"import\", \"format\": [ \"camelCase\", \"PascalCase\" ] } ], \"@typescript-eslint/semi\": \"warn\", \"curly\": \"warn\", \"eqeqeq\": \"warn\", \"no-throw-literal\": \"warn\", \"semi\": \"off\" }, \"ignorePatterns\": [ \"out\", \"dist\", \"**/*.d.ts\" ] }"},".gitignore":{"content":"out dist node_modules .vscode-test/ *.vsix"},".vscode-test.mjs":{"content":"import { defineConfig } from '@vscode/test-cli'; export default defineConfig({ files: 'out/test/**/*.test.js', });"},".vscodeignore":{"content":".vscode/** .vscode-test/** src/** .gitignore .yarnrc vsc-extension-quickstart.md **/tsconfig.json **/.eslintrc.json **/*.map **/*.ts **/.vscode-test.*"},"CHANGELOG.md":{"content":"# Change Log All notable changes to the \"dat\" extension will be documented in this file. Check [Keep a Changelog](http://keepachangelog.com/) for recommendations on how to structure this file. ## [Unreleased] - Initial release"},"package.json":{"content":"{ \"name\": \"dat\", \"displayName\": \"\", \"description\": \"\", \"version\": \"0.0.1\", \"engines\": { \"vscode\": \"^1.89.0\" }, \"categories\": [ \"Other\" ], \"activationEvents\": [], \"main\": \"./out/extension.js\", \"contributes\": { \"commands\": [ { \"command\": \"dat.helloWorld\", \"title\": \"Hello World\" } ] }, \"scripts\": { \"vscode:prepublish\": \"npm run compile\", \"compile\": \"tsc -p ./\", \"watch\": \"tsc -watch -p ./\", \"pretest\": \"npm run compile && npm run lint\", \"lint\": \"eslint src --ext ts\", \"test\": \"vscode-test\" }, \"devDependencies\": { \"@types/vscode\": \"^1.89.0\", \"@types/mocha\": \"^10.0.6\", \"@types/node\": \"18.x\", \"@typescript-eslint/eslint-plugin\": \"^7.7.1\", \"@typescript-eslint/parser\": \"^7.7.1\", \"eslint\": \"^8.57.0\", \"typescript\": \"^5.4.5\", \"@vscode/test-cli\": \"^0.0.9\", \"@vscode/test-electron\": \"^2.3.9\" } }"},"src":{"extension.ts":{"content":"// The module 'vscode' contains the VS Code extensibility API // Import the module and reference it with the alias vscode in your code below import * as vscode from 'vscode'; // This method is called when your extension is activated // Your extension is activated the very first time the command is executed export function activate(context: vscode.ExtensionContext) { // Use the console to output diagnostic information (console.log) and errors (console.error) // This line of code will only be executed once when your extension is activated console.log('Congratulations, your extension \"dat\" is now active!'); // The command has been defined in the package.json file // Now provide the implementation of the command with registerCommand // The commandId parameter must match the command field in package.json let disposable = vscode.commands.registerCommand('dat.helloWorld', () => { // The code you place here will be executed every time your command is executed // Display a message box to the user vscode.window.showInformationMessage('Hello World from !'); }); context.subscriptions.push(disposable); } // This method is called when your extension is deactivated export function deactivate() {}"},"test":{"extension.test.ts":{"content":"import * as assert from 'assert'; // You can import and use all API from the 'vscode' module // as well as import your extension to test it import * as vscode from 'vscode'; // import * as myExtension from '../../extension'; suite('Extension Test Suite', () => { vscode.window.showInformationMessage('Start all tests.'); test('Sample test', () => { assert.strictEqual(-1, [1, 2, 3].indexOf(5)); assert.strictEqual(-1, [1, 2, 3].indexOf(0)); }); });"}}},"tsconfig.json":{"content":"{ \"compilerOptions\": { \"module\": \"Node16\", \"target\": \"ES2022\", \"outDir\": \"out\", \"lib\": [ \"ES2022\" ], \"sourceMap\": true, \"rootDir\": \"src\", \"strict\": true /* enable all strict type-checking options */ /* Additional Checks */ // \"noImplicitReturns\": true, /* Report error when not all code paths in function return a value. */ // \"noFallthroughCasesInSwitch\": true, /* Report errors for fallthrough cases in switch statement. */ // \"noUnusedParameters\": true, /* Report errors on unused parameters. */ } }"}}