comments{
  Complex test map for validation
  Tests edge cases and validation rules
}
info{
  rowcount:15
  colcount:20
  biome:ice
  creator:GoldenTest
  levelname:Complex Validation Test
  oxygen:300/600
  opencaves:1,1;2,2;3,3
}
tiles{
38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38
38,1,1,1,1,30,30,30,30,11,11,11,11,1,1,1,1,1,1,38
38,1,0,0,0,30,30,30,30,11,11,11,11,0,0,0,0,0,1,38
38,1,0,42,0,30,30,30,30,11,11,11,11,0,46,0,0,0,1,38
38,1,0,42,0,30,30,30,30,11,11,11,11,0,46,0,0,0,1,38
38,1,0,42,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,38
38,1,0,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,38
38,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,38
38,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,38
38,1,0,0,0,1,1,50,50,1,1,1,1,0,0,0,0,0,1,38
38,1,0,0,0,1,12,112,12,1,1,1,1,0,0,0,0,0,1,38
38,1,0,0,0,1,1,1,1,1,6,6,6,6,6,6,0,0,1,38
38,1,0,0,0,0,0,0,0,0,6,6,6,6,6,6,0,0,1,38
38,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,38
38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38
}
height{
15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
15,10,10,10,10,8,8,8,8,6,6,6,6,10,10,10,10,10,10,15
15,10,10,10,10,8,8,8,8,6,6,6,6,10,10,10,10,10,10,15
15,10,10,10,10,8,8,8,8,6,6,6,6,10,10,10,10,10,10,15
15,10,10,10,10,8,8,8,8,6,6,6,6,10,10,10,10,10,10,15
15,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,15
15,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,15
15,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,15
15,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,15
15,10,10,10,10,12,12,12,12,12,12,12,12,10,10,10,10,10,10,15
15,10,10,10,10,12,12,12,12,12,12,12,12,10,10,10,10,10,10,15
15,10,10,10,10,12,12,12,12,12,3,3,3,3,3,3,10,10,10,15
15,10,10,10,10,10,10,10,10,10,3,3,3,3,3,3,10,10,10,15
15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
}
resources{
  crystals:
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  ore:
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
}
objectives{
  crystals:25
  ore:10
  buildings.BuildingPowerStation_C>0/condition
  miners>5
  time<600/sufficient
}
buildings{
  ID=1001
  type=BuildingToolStore_C
  xPos=2.0
  yPos=2.0
  heading=180.0
  level=1
  teleportAtStart=true
  ID=1002
  type=BuildingTeleportPad_C
  xPos=4.0
  yPos=2.0
  heading=0.0
}
vehicles{
  ID=3001
  type=VehicleSmallDigger_C
  xPos=6.0
  yPos=2.0
  heading=90.0
  level=1
  driver=Pilot
}
creatures{
  ID=4001
  type=CreatureSmallSpider_C
  xPos=10.0
  yPos=10.0
  heading=45.0
  sleep=true
  ID=4002
  type=CreatureRockMonster_C
  xPos=12.0
  yPos=12.0
  heading=270.0
}
miners{
  ID=2001
  type=Pilot
  xPos=3.0
  yPos=3.0
  heading=0.0
  level=2
  ID=2002
  type=Engineer
  xPos=3.0
  yPos=4.0
  heading=90.0
}
blocks{
}
script{
  # State machine example
  int State=0
  bool CooldownActive=false
  int CooldownTime=0
  
  # Circular dependency test (should be detected)
  when(State==0)[EventA]
  
  EventA::
  State:1;
  call:EventB;
  
  EventB::
  if(State==1)[EventC];
  
  EventC::
  State:2;
  EventA::;
  
  # Resource flow test
  when(init)[Setup]
  
  Setup::
  crystals:10;
  msg:StartMessage;
  
  when(crystals>=15)[AddMore]
  
  AddMore::
  crystals:5;
  ore:3;
  
  # Deadlock risk test
  when(CooldownActive==false and State==2)[StartCooldown]
  
  StartCooldown::
  CooldownActive:true;
  CooldownTime:time+30;
  
  when(time>=CooldownTime and CooldownActive==true)[EndCooldown]
  
  EndCooldown::
  CooldownActive:false;
  State:0;
}
landslidefrequency{
30
}
lavaspread{
60
}